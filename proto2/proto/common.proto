// Protobuf shared by all the other.
syntax = "proto3";

package proto.common;

// for discover, handshake, channel

message Endpoint {
  // type changed: bytes
  string address = 1;
  int32 port = 2;
  bytes node_id = 3;
}

message BlockId {
  bytes hash = 1;
  int64 number = 2;
}

enum ResourceCode {
  BANDWIDTH = 0x00;
  ENERGY = 0x01;
}

// for contract

enum AccountType {
  Normal = 0;
  AssetIssue = 1;
  Contract = 2;
}

message Vote {
  bytes vote_address = 1;
  int64 vote_count = 2;
}

message SmartContract {
  message ABI {
    enum EntryType {
      UnknownEntryType = 0;
      Constructor = 1;
      Function = 2;
      Event = 3;
      // Fallback functions are executed whenever a particular contract receives
      // plain Ether without any other data associated with the transaction.
      Fallback = 4;
      // Added in 4.1.2, for Solidity 0.6.0
      Receive = 5;
    }
    message Param {
      // This will cause the respective arguments to be searched for.
      // If arrays (including string and bytes) are used as indexed arguments,
      // the Keccak-256 hash of it is stored as topic instead.
      bool indexed = 1;
      string name = 2;
      string type = 3;
      // SolidityType type = 3;
    }
    enum StateMutabilityType {
      UnknownStateMutabilityType = 0;
      // With pure you cannot access the contract storage.
      // e.g. utility libraries.
      Pure = 1;
      // With view you cannot modify the contract storage, but you can access the storage.
      // e.g. contract getters.
      View = 2;
      Nonpayable = 3;
      Payable = 4;
    }
    message Entry {
      // The event was declared as `anonymous`
      bool anonymous = 1;
      // Replaced by view and pure.
      bool constant = 2;
      string name = 3;
      repeated Param inputs = 4;
      repeated Param outputs = 5;
      EntryType type = 6;
      bool payable = 7;
      StateMutabilityType state_mutability = 8;
    }
    // renamed: entrys
    repeated Entry entries = 1;
  }

  bytes origin_address = 1;
  bytes contract_address = 2;
  ABI abi = 3;
  bytes bytecode = 4;
  int64 call_value = 5;
  int64 consume_user_energy_percent = 6;
  string name = 7;
  int64 origin_energy_limit = 8;
  bytes code_hash = 9;
  // When smart contract is created by a trigger smart contract call.
  // renamed: trx_hash
  bytes txn_hash = 10;
}

message Permission {
  enum PermissionType {
    Owner = 0;
    Witness = 1;
    Active = 2;
  }
  message Key {
    bytes address = 1;
    int64 weight = 2;
  }

  PermissionType type = 1;
  // Owner id=0, Witness id=1, Active id starts by 2
  int32 id = 2;
  string name = 3;
  int64 threshold = 4;
  int32 parent_id = 5;
  // 1 bit for 1 contract type
  bytes operations = 6;
  repeated Key keys = 7;
}
